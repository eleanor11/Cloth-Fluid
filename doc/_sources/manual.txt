.. _Manual:

Manual
^^^^^^
.. _Intro:

.. highlight:: cpp

.. raw:: html
   :file: rest.css

Introduction
############

Flex is a particle-based simulation library that is broadly based on Position-Based Dynamics [1], and the Unified Particle Physics for Real-Time Applications SIGGRAPH paper [2]. 

The core idea of Flex is that *everything is a system of particles connected by constraints*. The benefit of having a unified representation is that it allows efficient modeling of many different materials, and allows interaction between elements of different types, for example, two-way coupling between rigid bodies and fluids.

Flex's strength lies in enabling interesting secondary effects that enhance the visual experience. It is not designed to build gameplay affecting physics, for example it lacks functionality such as trigger events, contact callbacks, ray-casting, serialization, etc. Although it is possible to build these capabilities on top of the core solver, they don't come in the box. For this reason it is recommended to use Flex in conjunction with a traditional rigid-body physics engine, such as PhysX.

The rest of this guide describes the standalone Flex SDK. It discusses some of the common applications, limitations, performance best practices, and general recommendations when using Flex.

.. _Design:

Library Design
##############

The library is broken into two parts, the core solver (flex.h), which essentially operates on flat arrays of particles and constraints, and an extensions library (flexExt.h), which provides some basic object/asset management to ease integration with typical work flows. The core solver is currently closed source, while the extensions library and demo application are shipped with full source.

The core solver API is written in C-style, and can be considered a low-level wrapper around the solver internals. In contrast to traditional physics APIs, where operations are carried out on one rigid body or constraint at a time, in Flex, all particles and constraints are sent to the solver in one shot, as flat-arrays. This allows Flex to be efficient when dealing with large numbers of constraints and particles, although it means performing incremental updates can be slower.

Flex uses a structure-of-arrays (SOA) data layout for efficiency during simulation. To avoid additional copy overhead the API requires data to be provided in this format.

.. _Quick:

Quick Start
***********

The example code below shows how to initialize the library, create a new solver (similar to a scene in PhysX), and how to tick the solver::

	#include <flex.h>

	const int maxParticles = 65536;
	const int maxDiffuse = 0;

	int main(void)
	{
		flexInit();
		FlexSolver* solver = flexCreateSolver(maxParticles, maxDiffuse);

		while (!finished)
		{
			const float dt = 1.0f/60.0f;

			// tick solver with one sub-step
			flexUpdateSolver(solver, dt, 1);
		}

		flexDestroySolver(solver);
		flexShutdown();

		return 0;
	}

Although Flex allows you to combine effects in one solver it often makes sense to create a separate solver for each type of effect. For example, if you have a scene with clothing and fluids, but they don't need to interact, you may have one solver for each. This approach provides more flexibility when setting parameters.

.. _Particles:

Particles
#########

Particles are the fundamental building-block in Flex. For each particle the basic dynamic quantities of position, velocity, and inverse mass are stored. The inverse mass is stored alongside the position, in the format [x, y, z, 1/m]. In addition to these properties, Flex also stores a per-particle *phase* value, which controls the particle behavior (see the Phase_ section for more information). Below is a simple example showing the layout for particle data, and how to set it onto the API.::

	float particles[] = { px1, py1, pz1, invMass1, px2, py2, pz2, invMass2, ... }
	float velocities[] = { vx1, vy1, vz1, vx2, vy2, vz3, ... }	
	int phases[] = { phase1, phase2, ... }	
	
	flexSetParticles(solver, particles, n);
	flexSetVelocities(solver, velocities, n);
	flexSetPhases(solver, phases, n);		

.. _Radius:
	
Radius
*******
All particles in Flex share the same radius, and its value has a large impact on simulation behavior and performance. The main particle radius is set via **FlexParams::mRadius**, which is the "interaction radius". Particles closer than this distance will be able to affect each other. How exactly they affect each other depends on the other parameters that are set, but this is the master control that sets the upper limit on the particle interaction distance.

Particles can interact as either fluids or solids, the **FlexParams::mSolidRestDistance** and **FlexParams::mFluidRestDistance** parameters control the distance particles attempt to maintain from each other, they must both be less than or equal to the radius parameter.

.. _Phase:

Phase
*****

Each particle in Flex has an associated *phase*, this is a 32 bit integer that controls the behavior of the particle in the simulation. A phase value consists of a group identifier, and particle flags, as described below:

* **eFlexPhaseGroupMask** - The particle group is an arbitrary positive integer, stored in the lower 24 bits of the particle phase. Groups can be used to organize related particles and to control collisions between them. The collision rules for groups are as follows: particles of different groups will always collide with each other, but by default particles within the same group will not collide. This is useful, for example, if you have a rigid body made up of many particles and do not want the internal particles of the body to collide with each other. In this case all particles belonging to the rigid would have the same group value.
* **eFlexPhaseSelfCollide** - To enable particles of the same group to collide with each other this flag should be specified on the particle phase. For example, for a piece of cloth that deforms and needs to collide with itself, each particle in the cloth could have the same group and have this flag specified.
* **eFlexPhaseFluid** - When this flag is set the particle will also generate fluid density constraints, cohesion, and surface tension effects with other fluid particles. Note that generally fluids should have both the fluid and self-collide flag set, otherwise they will only interact with particles of other groups.

The API comes with a helper function, flexMakePhase(), that generates phase values given a group and flag set. The example below shows how to set up phases for the most common cases::

	// create a fluid phase that self collides and generates density constraints
	int fluidPhase = flexMakePhase(0, eFlexPhaseSelfCollide | eFlexPhaseFluid);
	
	// create a rigid phase that collides against other groups, but does not self-collide
	int rigidPhase = flexMakePhase(1, 0);
	
	// create a cloth phase that collides against other groups and itself
	int clothPhase = flexMakePhase(2, eFlexPhaseSelfCollide);

.. _Active:
	
Active Set
**********

Each solver has a fixed maximum number of particles specified at creation time (see **flexCreateSolver()**), but not all particles need to be active at one time. Before a particle will be simulated, it must be added to the *active set*. This is an array of unique particle indices that the solver will simulate. Inactive particles have very low computational overhead, so this mechanism can be used to implement more general particle allocation strategies on top of the solver. 

The example code below shows how to create an active set which enables simulation on every second particle in the solver::

	int activeIndices[] = { 0, 2, 4, 6, ... }
	
	flexSetActive(solver activeIndices, n)

**Note:** constraints referencing inactive particles may behave unexpectedly.

.. _Constraints:

Constraints
###########

Constraints in Flex are what make particles behave in interesting ways. This section describes the basic constraint types, and discusses how they can be used to model common materials.

.. _Fluids:

Fluids
******

.. figure:: images/sticky_fluids.png 
   :align: center
   :width: 100%

   Fluids adhering to a wall

Fluids in Flex are based on Position Based Fluids (PBF) [3]. This method uses position-based density constraints to achieve lower compression and better stability than traditional Smoothed Particle Hydrodynamics (SPH) methods.

The behavior of the fluid depends on the ratio between **FlexParams::mRadius** and the **FlexParams::mFluidRestDistance**, a good rule of thumb is that the ratio should be about 2:1, e.g.: a radius of 10cm, and a rest distance of 5cm. When the radius is large compared to the rest distance the fluid is said to have a larger *smoothing distance*. Larger smoothing distances generally provide a more accurate simulation, but also tend to be more expensive because particles interact with many more neighbors. If the rest-distance is close to the radius, e.g.: a radius of 10cm, and a rest distance of 9cm, then the fluid will appear more like a granular material than a fluid, but will be cheaper to simulate because there is less overlap between neighbors.

Flex automatically calculates the fluid rest-density from the rest-distance and radius. When seeding fluid particles, the user should just take care to ensure particles are approximately at the rest-distance. In addition to the basic fluid density solve the following fluid behaviors are supported:

* **Cohesion** - Cohesion acts between fluid particles to bring them towards the rest-distance, while the density constraint only acts to push particles apart, cohesion can also pull them together. This creates gooey effects that cause long strands of fluids to form.
* **Surface Tension** - Surface tension acts to minimize the surface area of a fluid. It can generate convincing droplets that split and merge, but is somewhat expensive computationally. Surface tension effects are mostly visible at small scales, so often surface tension is not required unless you have a high-resolution simulation.
* **Vorticity Confinement** - Numerical damping can cause fluids to come to rest unrealistically quickly, especially when using low-resolution simulations. Vorticity confinement works by injecting back some rotational motion to the fluid. It is mostly useful for pools, or larger bodies of water.
* **Adhesion** - Adhesion affects how particles stick to solid surfaces, when enabled particles will stick to, and slide down surfaces. Note that adhesion will affect both fluid and solid particles.

Although Flex does not perform any rendering itself, it can generate information to support high-quality surface rendering based on ellipsoid splatting and screen-space surface reconstruction. If **FlexParams::mSmoothing** is > 0, then Flex will calculate the Laplacian smoothed fluid particle positions that can be accessed through **flexGetSmoothParticles()**. If, **FlexParams::mAnisotropyScale** is > 0, then Flex will also calculate the anisotropy vectors for each fluid particle according to the distribution of it's neighbors, these can be accessed through **flexGetAnisotropy()**. See [4] for more information on the anisotropy calculation, and refer to the demo application for example OpenGL fluid rendering code.

.. _Springs:

Springs
*******

Springs in Flex are specified as pairs of particle indices, a rest-length, and a stiffness coefficient. They are not a spring in the classical sense, but rather a distance constraint with a user-specified stiffness. The index pairs should appear consecutively, for example the following example code sets up a chain of particles with each edge 1 unit long, with a stiffness coefficient of 0.5::

	int springIndices[] = { 0, 1, 1, 2, 2, 3 }
	float springLengths[] = { 1.0f, 1.0f, 1.0f }
	float springCoefficients[] { 0.5f, 0.5f, 0.5f }

	flexSetSprings(solver, springIndices, springLengths, springCoefficients, 3);	

Distance constraints are incredibly versatile, and relatively cheap to solve. When combined with dynamic topology changes they can model interesting effects such as tearing, merging.

.. _Cloth:

Cloth
*****

Clothing in Flex is modeled using networks of springs. The cloth model is up to the user, but the extensions library provides an example 
cloth cooker (**flexExtCreateClothFromMesh()**) that implements a common approach where the 1-ring neighbors are used to control stretch, and 2-ring neighbors are used to control bending.

.. figure:: images/flag.png
   :align: center
   :width: 100%

   Cloth Flag
   
In addition to the basic cloth behavior governed by the distance constraints, there are some cloth specific features in Flex. By specifying
the underlying triangle topology using **flexSetDynamicTriangles()**, additional forces can be computed to generate more complex effects. Specifically:

* **Lift and drag** - Triangles will generate drag forces and lift forces proportional to area and orientation. This can generate interesting fluttering motion on pieces of cloth, typically drag forces should be set higher than lift.
* **Wind** - In addition to gravity, a global acceleration vector is provided to model basic wind. If the drag parameter is non-zero then triangles will receive forces according  to the wind vector's direction and magnitude.
* **Smooth normals** - When triangle topology is set, Flex will also generate smoothed vertex normals based on the current particle positions, these can be retrieved through **flexGetNormals()** for rendering.

**Note:** because all collisions in Flex are performed at the particle level, the cloth mesh must be sufficiently well tessellated to avoid particle tunneling. Care must especially be taken for clothing with self-collision, the cloth mesh should be authored so that the mesh has a uniform edge length close to the solid particle rest distance. If self-collision is enabled, and particles are closer than this in the mesh then erroneous buckling or folding might occur as the distance and collision constraints fight each other.

.. _Rigid:

Rigid Bodies
************

Rigid bodies in Flex are modeled quite differently from traditional rigid body solvers. In Flex, each rigid body consists of a collection of particles, and a shape matching constraint that holds them in a rigid configuration. By using particles to represent rigid bodies, Flex can use the same collision pipeline as for fluids, clothing, etc. Also, the shape-matching allows us to have semi-rigid, or deformable bodies, by setting a stiffness parameter per-body.

.. figure:: images/blocks.png
   :align: center
   :width: 100%

   Block Pile

Rigid bodies are specified by a set of rest-positions, relative to the body center of mass, through **flexSetRigids()**. The extensions library provides an example function (**flexExtCreateRigidFromMesh()**) that shows how particles can be placed to represent a triangle mesh. During simulation collisions are handled for each particle individually, so that after a collision, the particles are typically no-longer in their rigid configuration. In order to restore rigidity, the least squares best rigid transform is found to match the deformed particle positions back to the rigid shape. Unlike a traditional rigid body solver the linear or angular velocity of the body are not explicitly tracked, these quantities are simply derived from the particles referenced.

There are some limitations with this particle based approach. When the time-step is too large the particles can tunnel through each other and become interlocked. Flex allows you to specify a normal and distance value per-particle to help avoid this, see the paper [2] for more details. Another limitation of shape-matching is that the stiffness of the rigid body is affected by how many particles make it up. Bodies made of many particles can require many iterations to converge, and appear 'squishy'. Because of this, it is generally recommended to use Flex for smaller rigid bodies, and use a traditional rigid body solver for larger bodies. A good rule of thumb is to keep the effective particle resolution under 64^3 per-body.

The table below summarizes the strengths and weaknesses of Flex rigid bodies and suggests some suitable applications:

.. list-table:: 
   :header-rows: 1

   * - Strength
     - Examples
   * - Environmental debris
     - Bullet shrapnel, rocks, cans
   * - Unstructured piling 
     - Piles of trash
   * - Non-convex shapes
     - Irregular stones, bones, bananas
   * - Two-way interaction
     - Parachuting bunnies

.. list-table::    
   :header-rows: 1

   * - Weakness
     - Examples
   * - Thin or sharp objects
     - Floor tiles, glass shards
   * - Structured stacking
     - Brickwork, arches
   * - Large relative sizes
     - Large scale destruction
   * - Collision filtering
     - Character controller
	  

The particles in a rigid body can be affected by other constraints in Flex, some example applications of this generality are:

* Adding a rigid constraint to a piece of clothing to generate stiff bending resistance even at low-iteration counts
* Adding a rigid constraint to a fluid and animating the rigid stiffness to simulate melting or phase changes
* Connecting rigid bodies to clothing through distance constraints, e.g.: cloth hanging from the sides of a rigid body

.. _Soft:
 
Soft Bodies
***********

.. figure:: images/inflatables.png
   :align: center
   :width: 100%

   Inflatables

Although rigid bodies can be made to deform by lowering the stiffness value on the shape-matching constraint, this is only accurate for small scale deformations. For soft bodies with larger deformation Flex supports volume constraints which can be used to model inflatable objects under pressure. To set up an inflatable object Flex needs a closed, 2-manifold mesh to be specified using **flexSetDynamicTriangles()**. An inflatable is then defined by a start and end range in the triangles array using **flexSetInflatables()**. Each inflatable has an 'overpressure' parameter that controls how inflated it is relative to it's rest volume.

Although Flex does not currently expose tetrahedral constraints, they can be simulated in a limited fashion by creating distance constraints along the tetrahedral mesh edges. Another option for creating soft bodies is to create a grid of particles (e.g.: from a voxelization), and connecting neighboring particles by distance constraints.

.. _Solver:

Solver
######

.. _Stepping:

Time Stepping
*************

Flex supports sub-stepping through the **flexUpdateSolver()** *substeps* parameter. There is a trade-off between increasing the number of iterations and increasing the number of substeps. Collision detection is performed once per-substep, which means increasing substeps is more expensive than adding iterations, but it is often the only way to improve the accuracy of collision detection when using small particles. Each substep performs **FlexParams::mNumIterations** solve passes over the constraints, so substepping will also make constraints appear stiffer.

For best results the solver should be ticked with fixed time-steps. If the application runs with a variable frame rate, then the application should divide each frame's delta time into fixed size chunks and set the sub-step parameter accordingly. Variable time stepping is supported, but will often result in 'wiggle' or 'jittering', as the amount of constraint error is usually related to the time-step size.

**Note:** many constraint types allow the user to specify a stiffness value, but the overall stiffness of the simulation is dependent on the number of solver iterations, the time-step, and the number of sub-steps.

.. _Relaxation:

Relaxation
**********

Typically the constraint solve is the most time-consuming aspect of the simulation, so Flex has some parameters to fine-tune the convergence speed. The solver has two primary modes of operation, *local*, and *global*, as described below:

* **eFlexRelaxationLocal** - In this mode a local averaging is performed per-particle. The sum of all constraints affecting a particle is averaged before updating the position and velocity. This method is very robust and will generally converge even in difficult circumstances, for example when competing or redundant constraints are present. However it tends to converge quite slowly, and requires many iterations to appear stiff. To improve convergence in this mode **FlexParams::mRelaxationFactor** can be set to a value > 1.0, this is called *over relaxation*, values much larger than 1.0 will occasionally cause the simulation to blow up so it should be set carefully.

* **eFlexRelaxationGlobal** - In this mode the effect of constraints is weighted by a global factor, no averaging is performed. This mode tends to converge faster than the local mode, but may cause divergence in difficult cases. In this mode the relaxation factor, **FlexParams::mRelaxationFactor**, should be set to a value < 1.0, e.g.: 0.25-0.5 to ensure convergence.

.. _Collision:

Collision
#########

Flex supports four types of collision geometry: convex hulls, triangle meshes, signed distance fields, and infinite half-spaces.

.. _Triangles:

Triangle Meshes
***************

Indexed triangle meshes can be provided to the solver through the **flexSetTriangles()** method. Collision against triangle meshes is performed using CCD line-segment tests, using the particle velocity at the beginning of the frame. Triangle tests are performed as if two-sided. Even though the initial test is a form of continuous collision detection, it is still possible for particles to tunnel if they are pushed through the triangle mesh by constraints during the constraint solve. To avoid this, there is an option to run
a second pass of collision detection post-constraint solve, see **FlexParams::mEnableCCD**;

.. _Convexes:

Convex Meshes
*************

Convex polyhedrons are supported, and are represented by sets of half-spaces through **flexSetConvexes()**. An array of all convex planes is specified, and an individual convex
shape is specified as an offset and count into the array. Each convex must also have it's world-space AAAB, translation and rotation specified.

While triangle meshes are always considered as static, convex meshes can have a previous transformation specified which will enable accurate frictional effects to be calculated. Each convex may also be marked as static or dynamic, which affects the priority that contacts are solved in.

.. _SDFs:

Signed Distance Fields
**********************

Signed distance fields (SDFs) can be specified as a dense voxel array of floating point data. SDFs are very
cheap to collide against because they are stored as volume textures on the GPU and have an O(1) lookup cost. Flex uses the convention that negative values
represent the shape interior, with the distance value normalized between -1 to 1 according to the volume dimensions, see **flexSetFields()** for more information.

.. _Planes:

Planes
******

In addition to the convex meshes, there is also a convenient way to set infinite half-spaces to the solver through **FlexParams::mPlanes**.

.. _Margins:

Margins
*******

For most geometry, Flex uses discrete collision detection which is generally performed once per-substep. Performing collision detection only once per-substep is efficient, but means that collisions may be missed. When this happens, the particle may either tunnel through the shape, or be ejected back out on the next frame. This can sometimes appear as popping or jumping for no obvious reason. One way to ensure collisions are not missed is to increase the distance at which the contacts are generated. This is what the margin parameters
are used for:

* **FlexParams::mParticleCollisionMargin** - Increases the distance at which particle interactions are created
* **FlexParams::mShapeCollisionMargin** - Increases the distance at which contacts with static geometry are considered

**Note:** increasing the collision margin will naturally generate more contacts, which can also be problematic. Internally Flex stores up to 4 contact planes
per-particle, if this is exceeded then subsequent contacts will be dropped. Increasing the margin can also harm performance, be particularly
careful increasing the particle collision margin, as this can cause many particle neighbors to be unnecessarily considered. Generally the margins should only be
increased if you are having problems with collision, and always set as low as possible.

**Note:** margins are added on top of the **FlexParams::mRadius** parameter.

.. _Priority:

Priority
********

The order in which particle contacts with shapes are processed has a large impact on the behavior of the simulation. To avoid tunneling through thin shapes, and to prevent dynamic objects pushing particles through static shapes, Flex processes contacts with the following priority:

1. Triangle meshes
2. Static signed distance fields (SDFs)
3. Static convex meshes
4. Dynamic convex meshes

See **flexSetConvexes()** for more details on setting the dynamic/static convex shape flags.

.. _Diffuse:

Diffuse Particles
#################

.. figure:: images/diffuse.png 
   :align: center
   :width: 100%

   Diffuse foam and spray particles

The spray and foam in Flex is made through the use of diffuse particles. These are secondary, *passive*, particles that can be used to add additional detail to an underlying
simulation. Diffuse particles can be created through the **flexSetDiffuseParticles()** method, or created by the simulation itself. If **FlexParams::mDiffuseThreshold** is set, then colliding fluid particles generate a diffuse *potential* according to their kinetic energy and relative velocity. When this potential goes over the threshold a new diffuse particle will be spawned at a random location around that particle.

When a diffuse particle is surrounded by fluid neighbors, it will interpolate their velocity and be advected forward through the flow. If a diffuse particle has less than **FlexParams::mDiffuseBallistic** neighboring particles, then it will be treated as a simple ballistic particle and move under gravity.

**Note:** it is often useful to have the diffuse particles sorted back to front for rendering. The solver can optionally perform this sort by specifying the **FlexParams::mDiffuseSortAxis**, if this is zero then the particles will not be sorted for rendering.

.. _Threading:

Threading
#########

The Flex core and extension APIs are not thread-safe, meaning only one thread should ever use the API at a time. Flex uses the CUDA runtime API internally, so if no CUDA context exists when **flexInit()** is called, then one will be created. If using multiple threads/contexts then it is up to the user to ensure that the same context is used for all API calls e.g.: using cuCtxSetCurrent().

One important aspect of GPU programming is minimizing expensive synchronization between the CPU and GPU. Flex supports this by exposing asynchronous memory transfers, with fences to synchronize their completion. All of the flexGet* and flexSet* methods take a parameter to specify how the memory transfer should be performed (see **eFlexMemoryHostAsync**, and **eFlexMemoryDeviceAsync**). Asynchronous transfers between the CPU and GPU are only possible when the CPU buffer resides in *pinned host memory*, which is a special type of main memory allocation that cannot be paged to disk. Flex provides a helper method, **flexAlloc()**, to allocate pinned host memory directly, without the user having to call the CUDA API.

Here is a more fully featured example that shows how the stepping in Flex can be structured to take advantage of asynchronous transfers::

	#include <flex.h>

	const int maxParticles = 65536;
	const int maxDiffuse = 0;

	int main(void)
	{
		flexInit();
		flexSolver* solver = flexCreateSolver(maxParticles, maxDiffuse);

		// alloc CUDA pinned host memory to allow asynchronous memory transfers
		Vec4* particles = flexAlloc(maxParticles*sizeof(Vec4));
		Vec3* velocities = flexAlloc(maxParticles*sizeof(Vec3));
		int* phases = flexAlloc(maxParticles*sizeof(int));

		// set initial particle data
		InitParticles(particles, velocities, phases);

		while (!finished)
		{
			const float dt = 1.0f/60.0f;

			// update positions, apply custom force fields, etc
			ModifyParticles(particles, velocities);

			// update GPU data asynchronously
			flexSetParticles(solver, particles, maxParticles, eFlexMemoryHostAsync);
			flexSetVelocities(solver, velocities, maxParticles, eFlexMemoryHostAsync);

			// tick solver
			flexUpdateSolver(solver, dt, 1);

			// kick off async memory reads from device
			flexGetParticles(solver, particles, maxParticles, eFlexMemoryHostAsync);
			flexGetVelocities(solver, velocities, maxParticles, eFlexMemoryHostAsync);

			// wait for GPU to finish working (can perform async. CPU work here)
			flexSetFence();
			flexWaitFence();

			// updated particle data is ready to be used
			RenderParticles(particles, velocities);
		}

		flexFree(particles);
		flexFree(velocities);
		flexFree(phases);

		flexDestroySolver(solver);
		flexShutdown();

		return 0;
	}


**Note:** Flex can also transfer data directly to OpenGL or DirectX buffers directly through the CUDA-graphics interop mechanism, see the CUDA programming guide and Flex demo application for more details.

.. _Profiling:

Profiling
#########

Because Flex executes most of its work asynchronously on the GPU, it is not recommended to measure execution times with CPU timers around API calls. The FlexTimers class can be passed to **flexUpdateSolver()** to query internal GPU execution times, these timers can give a good idea of which parts of the update pipeline are the bottleneck. Note that this should only be passed when profiling is needed, as it introduces significant performance overhead that will skew the overall frame time (each individual timer is accurate however).

.. _Limitations:

Limitations / Known Issues
##########################

* Position-Based Dynamics has a close relationship to traditional implicit time-stepping schemes. As such, it is quite dissipative and will quickly lose energy, often this is acceptable (and sometimes desirable), however external forcing functions (such as vorticity confinement) can be used to inject energy back to the simulation.

* Flex is not deterministic. Although simulations with the same initial conditions are often reasonably consistent, they may diverge over time, and may differ between different GPU architectures and versions.

* Restitution for rigid bodies may behave weaker than expected, this is generally problematic for shape-matched rigid bodies.

* Particles can have a maximum of 4 contact planes per-step, if a particle overlaps more than 4 planes then contacts will be dropped.

.. _Acknowledgements:

Acknowledgments
###############

* The Flex demo application uses the imgui library from Mikko Mononen's Recast library, https://github.com/memononen/recastnavigation

* The Flex demo application uses the stb_truetype.h font library from Sean Barrett, https://github.com/nothings/stb

* The Flex solver uses NVIDIA's CUB library for parallel operations internally, http://nvlabs.github.io/cub/

.. _References:

References
##########

[1] Position Based Dynamics - Matthias Müller, Bruno Heidelberger, Marcus Hennix, John Ratcliff - J. Vis. Communications, 2007 - http://dl.acm.org/citation.cfm?id=1234575

[2] Unified Particle Physics for Real-Time Applications - Miles Macklin, Matthias Müller, Nuttapong Chentanez, Tae-Yong Kim: Unified Particle Physics for Real-Time Applications, ACM Transactions on Graphics (SIGGRAPH 2014), 33(4), http://dl.acm.org/citation.cfm?id=2601152

[3] Position Based Fluids - Miles Macklin, Matthias Müller: Position Based Fluids, ACM Transactions on Graphics (SIGGRAPH 2013), 32(4), http://dl.acm.org/citation.cfm?id=2461984

[4] Reconstructing surfaces of particle-based fluids using anisotropic kernels - Jihun Yu and Greg Turk. 2013. ACM Trans. Graph. 32, 1, Article 5 (February 2013). http://dl.acm.org/citation.cfm?id=2421641


